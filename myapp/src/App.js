import React, { useState, useEffect } from 'react';
import { Amplify } from 'aws-amplify'; // Correct import from aws-amplify
import awsconfig from './aws-exports'; // Automatically generated by Amplify
import { Authenticator } from '@aws-amplify/ui-react';
import Navbar from "./Navbar";
import Pricing from "./pages/Pricing";
import Home from "./pages/Home";
import About from "./pages/About";
import { Route, Routes } from "react-router-dom";

// Configure Amplify with the aws-exports configuration
Amplify.configure(awsconfig);

function App() {
  const [userName, setUserName] = useState("Guest");
  const [newName, setNewName] = useState("");

  useEffect(() => {
    // This will log the user object whenever it changes
    const checkUser = async () => {
      try {
        const user = await Amplify.Auth.currentAuthenticatedUser(); // Correct call using Amplify.Auth
        console.log("Fetched user:", user);  // Log the user object

        // Set userName to display either user.name or fallback to username
        const name = user.attributes.name || user.username;
        setUserName(name);
      } catch (error) {
        console.error("Error fetching user data:", error);
        setUserName("Guest");  // Default to "Guest" if no authenticated user is found
      }
    };

    checkUser(); // Call the function to check if user is authenticated
  }, []);

  const handleNameChange = async () => {
    try {
      const user = await Amplify.Auth.currentAuthenticatedUser(); // Correct call using Amplify.Auth
      console.log("User before update:", user);  // Log the user object before updating

      // Check if newName is not empty
      if (!newName.trim()) {
        alert("Please enter a valid name.");
        return;
      }

      // Update the user attribute with the new name
      const updatedUser = await Amplify.Auth.updateUserAttributes(user, {
        name: newName,
      });

      console.log("Updated user:", updatedUser);  // Log the updated user object

      // After updating, we reflect the updated name in the UI
      setUserName(updatedUser.attributes.name);
      alert("Name updated successfully!");
    } catch (error) {
      console.error("Error updating name:", error);
      alert("Error updating name. Please check the console for details.");
      if (error && error.message) {
        alert("Detailed Error: " + error.message); // Show detailed error message
      }
      if (error && error.response) {
        console.log("Error Response:", error.response);  // Log the error response for further debugging
      }
    }
  };

  return (
    <>
      <Navbar />
      <div className="container">
        {/* Wrap your Routes inside the Authenticator component */}
        <Authenticator>
          {({ signOut, user }) => {
            console.log("Logged-in user:", user);  // Log the user object

            return (
              <>
                <h2>Welcome, {userName}</h2> {/* Display name or fallback to username */}
                
                {/* Form to change the user's name */}
                <div>
                  <input
                    type="text"
                    placeholder="Enter new name"
                    value={newName}
                    onChange={(e) => setNewName(e.target.value)}
                  />
                  <button onClick={handleNameChange}>Update Name</button>
                </div>
                
                <button onClick={signOut}>Sign Out</button>

                <Routes>
                  <Route path="/" element={<Home />} />
                  <Route path="/pricing" element={<Pricing />} />
                  <Route path="/about" element={<About />} />
                </Routes>
              </>
            );
          }}
        </Authenticator>
      </div>
    </>
  );
}

export default App;
